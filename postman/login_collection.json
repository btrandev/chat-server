{
	"info": {
		"_postman_id": "cf3ff043-6dae-479b-b390-1db72e190ace",
		"name": "0. Chat Server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2350077",
		"_collection_link": "https://www.postman.com/btran24/workspace/chatserverdemo/collection/2350077-cf3ff043-6dae-479b-b390-1db72e190ace?action=share&source=collection_link&creator=2350077"
	},
	"item": [
		{
			"name": "login 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User object should exist and have valid properties\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.user).to.exist;\r",
							"  pm.expect(responseData.user).to.be.an('object');\r",
							"  pm.expect(responseData.user.id).to.be.a('number');\r",
							"  pm.expect(responseData.user.email).to.be.a('string');\r",
							"  pm.expect(responseData.user.firstName).to.be.a('string');\r",
							"  pm.expect(responseData.user.lastName).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User's first name and last name must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.user).to.be.an('object');\r",
							"  pm.expect(responseData.user.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");\r",
							"  pm.expect(responseData.user.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Access token is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.access_token).to.exist;\r",
							"    pm.environment.set(\"authToken1\", responseData.access_token);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"abc@gmail.com\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4002/api/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4002",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User object should exist and have valid properties\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.user).to.exist;\r",
							"  pm.expect(responseData.user).to.be.an('object');\r",
							"  pm.expect(responseData.user.id).to.be.a('number');\r",
							"  pm.expect(responseData.user.email).to.be.a('string');\r",
							"  pm.expect(responseData.user.firstName).to.be.a('string');\r",
							"  pm.expect(responseData.user.lastName).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User's first name and last name must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.user).to.be.an('object');\r",
							"  pm.expect(responseData.user.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");\r",
							"  pm.expect(responseData.user.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Access token is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.access_token).to.exist;\r",
							"    pm.environment.set(\"authToken2\", responseData.access_token);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"def@gmail.com\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8002/api/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8002",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 500', function () {\r",
							"    pm.expect(pm.response.code).to.equal(500);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"ghk@gmail.com\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4002/api/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4002",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}